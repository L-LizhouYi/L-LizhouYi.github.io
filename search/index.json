[{"content":" 让我仔细看看你的模样 倒数着最后的谢幕时光\n我的白马儿呀你慢些跑啊 这一次没有我带你回家\n—— 马.福禄寿\n环境准备 Python3 服务器 \u0026lt;系统不限\u0026gt; 域名 SSL证书 \u0026lt;Let\u0026rsquo;s Encrypt 泛域名\u0026gt; Ookla_Speedtest_Flask 点我跳转\n安装部署 拉取项目 建议使用 Git 命令 Clone\n1 git clone https://github.com/L-LizhouYi/Ookla_Speedtest_Flask.git 安装依赖库 1 2 cd Ookla_Speedtest_Flask python3 -m pip install -r requirements.txt 启动服务 启动服务并在浏览器中访问\n访问站点后会自动创建数据库，但由于数据库中没有测速节点，所以页面就会显示无法连接。\n使用 sqlite3 命令添加一条节点，节点可以去项目页面获取。\n1 INSERT INTO \u0026#34;main\u0026#34;.\u0026#34;speedtest_servers\u0026#34;(\u0026#34;id\u0026#34;, \u0026#34;sponsor\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;host\u0026#34;, \u0026#34;url\u0026#34;, \u0026#34;country\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;lat\u0026#34;, \u0026#34;lon\u0026#34;, \u0026#34;distance\u0026#34;, \u0026#34;preferred\u0026#34;, \u0026#34;https_functional\u0026#34;, \u0026#34;force_ping_select\u0026#34;, \u0026#34;show\u0026#34;, \u0026#34;internal\u0026#34;) VALUES (1, \u0026#39;天津电信\u0026#39;, \u0026#39;天津\u0026#39;, \u0026#39;tjrate.tjtele.com.prod.hosts.ooklaserver.net:8080\u0026#39;, \u0026#39;http://tjrate.tjtele.com:8080/speedtest/upload.php\u0026#39;, \u0026#39;China\u0026#39;, \u0026#39;CN\u0026#39;, 0.0, 0.0, 0, 0, 1, 1, 1, 0); 添加成功后，再次启动项目，可以看到节点加载成功\n申请SSL证书 使用 Certbot 直接申请一个泛域名证书\n1 certbot certonly --standalone -d *.example.com 根据上面的提示添加一条TXT的解析记录\n配置完成后保存，然后在终端中按回车验证，验证成功后证书文件就会保存到 /etc/letsencrypt/archive/\n1 2 3 4 5 Successfully received certificate. Certificate is saved at: /etc/letsencrypt/live/sundayssr.top/fullchain.pem Key is saved at: /etc/letsencrypt/live/sundayssr.top/privkey.pem This certificate expires on 2023-12-09. These files will be updated when the certificate renews. 安装 SpeedTest Server 官网下载地址 下载SpeedTest的二进制文件到服务器上\n1 2 3 4 5 6 7 8 wget https://install.speedtest.net/ooklaserver/stable/OoklaServer.tgz wget https://install.speedtest.net/ooklaserver/ooklaserver.sh tar -xf OoklaServer.tgz tar -xf OoklaServer-linux64.tgz chmod +x ooklaserver.sh chmod +x OoklaServer 然后把申请到的证书放到当前目录下\n1 2 cp -r /etc/letsencrypt/archive/sundayssr.top/ ./ mv sundayssr.top/ cert ├── cert │ ├── cert1.pem │ ├── chain1.pem │ ├── fullchain1.pem │ └── privkey1.pem ├── OoklaServer ├── OoklaServer.pid ├── OoklaServer.properties └── ooklaserver.sh\n修改 OoklaServer.properties.default 并名为 OoklaServer.properties\n1 2 openSSL.server.certificateFile = cert/fullchain1.pem openSSL.server.privateKeyFile = cert/privkey1.pem 通过添加域名解析，或者修改路由器的DNS，使 sp.sundayssr.top 可以解析到服务器上\n解析成功后启动 SpeedTest Server，并使用 https://sp.sundayssr.top:8080 访问测试\n添加节点到数据库 添加节点同上\n1 INSERT INTO \u0026#34;main\u0026#34;.\u0026#34;speedtest_servers\u0026#34;(\u0026#34;id\u0026#34;, \u0026#34;sponsor\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;host\u0026#34;, \u0026#34;url\u0026#34;, \u0026#34;country\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;lat\u0026#34;, \u0026#34;lon\u0026#34;, \u0026#34;distance\u0026#34;, \u0026#34;preferred\u0026#34;, \u0026#34;https_functional\u0026#34;, \u0026#34;force_ping_select\u0026#34;, \u0026#34;show\u0026#34;, \u0026#34;internal\u0026#34;) VALUES (2, \u0026#39;本地节点 (内网)\u0026#39;, \u0026#39;内网\u0026#39;, \u0026#39;sp.sundayssr.top:8080\u0026#39;, \u0026#39;http://sp.sundayssr.top:8080/speedtest/upload.php\u0026#39;, \u0026#39;China\u0026#39;, \u0026#39;CN\u0026#39;, 0.0, 0.0, 0, 0, 1, 1, 1, 0); Over !!!\n文件说明 conmfig.ini 这个文件用于自定义 web 页面的 服务端口、 标题、 背景颜色等，可以删掉，删掉后默认绑定为localhost的8080 端口。\n1 2 3 4 5 6 7 8 9 10 11 [app] host = 0.0.0.0 port = 80 debug = True [style] title = Ookla_Speedtest_Flask subdomain = Ookla rootDomain = speedtest.net backgroundColor = #ffffff primaryColor = #1f1f1f speedtest.db sqlite3数据库文件，存放节点信息和测试历史。会在项目第一次启动访问后自动创建。\n结尾 没有工作的一天, 呵 tui 我去年买了个表, 放在了BLB.\n","date":"2023-09-10T21:08:05+08:00","image":"https://blog.eeho.cn/p/ookla_speedtest-%E6%90%AD%E5%BB%BA/BackGround_hu06d64d0a28a8cad1c3fa0e289a479bef_124197_120x120_fill_box_smart1_3.png","permalink":"https://blog.eeho.cn/p/ookla_speedtest-%E6%90%AD%E5%BB%BA/","title":"Ookla_SpeedTest 搭建"},{"content":" 想不想看花海盛开 想不想看燕子归来.\n如果一切都回不来 那么我该为了谁而存在.\n\u0026mdash;\u0026mdash; 我用什么把你留住.福禄寿\n准备工作 域名 国外VPS（推荐Debian） Cloudflare 工具链接 Bt (开心版)\n1 curl -sSO http://io.bt.sy/install/install_panel.sh \u0026amp;\u0026amp; bash install_panel.sh X-UI（Xray管理面板）\n1 bash \u0026lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh) 安装部署 安装Bt面板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ================================================================== Congratulations! Installed successfully! ================================================================== 外网面板地址: http://2401:c080:1000:42b4:5400:4ff:fe84:393c:28778/076bb078 内网面板地址: http://198.13.44.212:28778/076bb078 username: pg4wtwxk password: 823db350 If you cannot access the panel, release the following panel port [28778] in the security group 若无法访问面板，请检查防火墙/安全组是否有放行面板[28778]端口 ================================================================== Time consumed: 10 Minute! 已经安装完毕，欢迎使用！ 运行环境只安装 Nginx 即可\n安装 X-ui面板 1 2 3 4 5 6 7 8 9 10 11 12 13 出于安全考虑，安装/更新完成后需要强制修改端口与账户密码 确认是否继续?[y/n]:y 请设置您的账户名:xray 您的账户名将设定为:xray 请设置您的账户密码:xray 您的账户密码将设定为:xray 请设置面板访问端口:9999 您的面板访问端口将设定为:9999 确认设定,设定中 set username and password success 账户密码设定完成 set port 9999 success面板端口设定完成 x-ui v0.3.2 安装完成，面板已启动 在Bt中放行x-ui面板端口\nCF绑定域名并开启代理 新建 Vless 入站规则 因为使用套用 Nginx 所以在此处关闭 tls 防火墙放行 9000 端口使用浏览器 访问 http://198.13.44.212:9000/vless 查看是否创建成功\n创建Nginx伪装网站 使用Nginx的反向代理 伪装任意网站\n访问网站，代理页面访问正常\n使用Nginx代理Vless流量 1 2 3 4 #原配置 proxy_pass http://127.0.0.1:9000/vless/; #修改后 proxy_pass http://127.0.0.1:9000/vless; 代理成功\n部署CF源服务器证书 开启网站 HTTPS 访问 https://xray.sundayssr.top/vless 测试\n连接节点测试 到此 节点就已经搭建完成\n一些细节的优化 修改时区 1 2 3 4 5 6 7 8 #查看并设置时区 timedatectl list-timezones timedatectl set-timezone Asia/Shanghai timedatectl #同步时间 apt install ntpdate -y ntpdate pool.ntp.org 端口安全 目前为止 为了防止被扫描端口，可以将 9999 和 9000 端口禁用，9000 已经被 Nginx代理 直接 禁用，9999 是x-ui 面板端口可也以使用同样的方法将其进行代理。\n修改 x-ui的面板设置 配置反向代理 到此便可以使用 https://xray.sundayssr.top/xui/ 来管理面板 规则保留默认即可\nNginx 日志显示 真实 IP 由于网站套用了CF的 CDN导致在查看 Nginx 日志的时候，现实的全部都是 CF 的 IP 地址，通过以下配置可以解决这个问题 首先确定 Nginx 编译了 with-http_realip_module 这个模块\n1 2 3 nginx -V configure arguments: --user=www --group=www --prefix=/www/server/nginx --add-module=/www/server/nginx/src/ngx_devel_kit --add-module=/www/server/nginx/src/lua_nginx_module --add-module=/www/server/nginx/src/ngx_cache_purge --add-module=/www/server/nginx/src/nginx-sticky-module --with-openssl=/www/server/nginx/src/openssl --with-pcre=pcre-8.43 --with-http_v2_module --with-stream --with-stream_ssl_module --with-stream_ssl_preread_module --with-http_stub_status_module --with-http_ssl_module --with-http_image_filter_module --with-http_gzip_static_module --with-http_gunzip_module --with-ipv6 --with-http_sub_module --with-http_flv_module --with-http_addition_module --with-http_realip_module --with-http_mp4_module --add-module=/www/server/nginx/src/ngx_http_substitutions_filter_module-master --with-ld-opt=-Wl,-E --with-cc-opt=-Wno-error --with-ld-opt=-ljemalloc --with-http_dav_module --add-module=/www/server/nginx/src/nginx-dav-ext-module 然后创建 /www/server/nginx/conf/cloudflare_ip.conf 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 set_real_ip_from 103.21.244.0/22; set_real_ip_from 103.22.200.0/22; set_real_ip_from 103.31.4.0/22; set_real_ip_from 104.16.0.0/12; set_real_ip_from 108.162.192.0/18; set_real_ip_from 131.0.72.0/22; set_real_ip_from 141.101.64.0/18; set_real_ip_from 162.158.0.0/15; set_real_ip_from 172.64.0.0/13; set_real_ip_from 173.245.48.0/20; set_real_ip_from 188.114.96.0/20; set_real_ip_from 190.93.240.0/20; set_real_ip_from 197.234.240.0/22; set_real_ip_from 198.41.128.0/17; set_real_ip_from 2400:cb00::/32; set_real_ip_from 2606:4700::/32; set_real_ip_from 2803:f800::/32; set_real_ip_from 2405:b500::/32; set_real_ip_from 2405:8100::/32; set_real_ip_from 2c0f:f248::/32; set_real_ip_from 2a06:98c0::/29; real_ip_header CF-Connecting-IP; 然后在Nginx配置文件中引用\n最后使用 nginx -s reload 重载配置文件即可\n配合Bt的网站监控报表可查询归属地等信息.\nXray 日志 1 2 #创建日志文件夹 mkdir /var/log/xray/ 在xray相关配置填入\n1 2 3 4 5 6 \u0026#34;log\u0026#34;: { \u0026#34;access\u0026#34;: \u0026#34;/var/log/xray/access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;/var/log/xray/error.log\u0026#34;, \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34;, \u0026#34;dnsLog\u0026#34;: false }, 注：要想Xray日志的真实IP是根据Nginx显示的，所以Nginx显示正确 Xray才会显示正确\nCloudflareST 优选 IP https://github.com/XIU2/CloudflareSpeedTest\n使用Cf的CDN后 由于各种原因域名直接解析的IP可能不是距离最近最优的，CloudflareST可以帮助我们解决这个问题\n可以看到 CloudflareST 已经帮我们选出了低延迟的 CF_IP 但是在测速的时候却没有下载速度，这个问题作者也在Github进行了回复。\nhttps://github.com/XIU2/CloudflareSpeedTest/issues/168\n自用的话可以通过 VPS 创建测速文件进行解决这个问题\n1 2 dd if=/dev/zero of=/www/wwwroot/xray.sundayssr.top/cf/100 bs=1K count=102400 dd if=/dev/zero of=/www/wwwroot/xray.sundayssr.top/cf/200 bs=1K count=204800 修改网站的反向代理配置文件\n1 2 3 4 5 6 7 8 #cf_speedtest_file location /cf { root /www/wwwroot/xray.sundayssr.top; autoindex on; autoindex_exact_size off; autoindex_localtime on; } 使用 CloudflareST 配合 -url 参数 测试即可\n替换此处IP即可.\n日志分析脚本（Python）待更新\u0026hellip; ","date":"2023-07-23T16:54:05+08:00","image":"https://blog.eeho.cn/p/xray-vless-nginx-cf_wall_%E6%96%B9%E6%A1%88/BackGround_hu3b605a4ed6ca89cc85d27885e63c16e0_44967_120x120_fill_box_smart1_3.png","permalink":"https://blog.eeho.cn/p/xray-vless-nginx-cf_wall_%E6%96%B9%E6%A1%88/","title":"Xray-Vless-Nginx-Cf_Wall_方案"},{"content":"Hugo的安装记录 随笔 在这个喧嚣的时代正如在我的关于中写的那样，变得越来越浮躁，并且 还多愁善感、犹豫不决，害怕失去从而对一些新鲜事物却望而却步，直接敲起了退堂鼓。\n正如薛之谦 《环》中的写的那样 :\n美若天仙 金山银山 依旧只能饱览寂寞景观 填不满大海 喂不饱深渊 摘不到月亮的人说肝肠寸断 不肯太近 不能太远 不敢跳出迷人的舒适圈 然后无限循环\nEmm 所以我就来写Blog了反正 不会有人看见，嘿嘿\u0026hellip;\n准备工作 电脑一台 耐心一份 Md编辑器 开始 Hugo-Github hugo-theme-stack-主题 注意: 要使用hugo-theme-stack这个主题的话需要下载 Hugo的扩展版本\n初始化博客 在任意文件夹中使用以下命令即可初始化你的博客，前提是Hugo要被添加进环境变量\n1 hugo new site blog hugo-theme-stack主题安装 具体的安装可以看这篇文章 安装教程\n遇到的错误 在我按照上面的教程配置完成后，兴致勃勃去创建第一篇文章去了，对就是现在这篇文章，但是它死活创建不了。抛出了一个错误提示，去官网查看说面，给的也是 toml 的配置，Emmm无耐去请教ChatGPT去了。\n1 2 3 WARN config: languages.zh-cn.description: custom params on the language top level is deprecated and will be removed in a future release. Put the value below [languages.zh-cn.params]. See https://gohugo.io/content-management/multilingual/#changes-in-hugo-01120 Start building sites … hugo v0.115.1-857374e69358f788bd31ddc55255c5c8e3dcfd80+extended darwin/amd64 BuildDate=2023-07-03T17:28:25Z VendorInfo=gohugoio 解决办法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 baseurl: https://example.com theme: hugo-theme-stack title: \u0026#34;Min blogg\u0026#34; paginate: 5 languages: zh-cn: languageName: 中文 description: 演示说明 weight: 1 languageCode: \u0026#34;zh-cn\u0026#34; zh-cn: params: color: \u0026#34;black\u0026#34; 一些魔改 mastodon 看到一位大佬的Hugo博客在分类板块的上面有一个实时动态的这么一个板块，感觉挺有意思的。这个是链接，奈何怪我太菜看不懂，只能自己用JS实现了\n样式：\n直接上代码吧：\n/你的网站目录/staic/js/mastodon.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // 目标元素 const targetElement = document.querySelector(\u0026#34;.archives\u0026#34;); // 插入新的 HTML 代码 const newHTML = ` \u0026lt;section class=\u0026#34;widget mastodon-widget\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;widget-icon\u0026#34;\u0026gt; \u0026lt;object data=\u0026#34;/mastodon.svg\u0026#34; type=\u0026#34;image/svg+xml\u0026#34; class=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/object\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026#34;widget-title section-title\u0026#34;\u0026gt;动态\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;widget-mastodon--list\u0026#34; class=\u0026#34;widget-mastodon--list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34; id=\u0026#34;Rep\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;正在加载...\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;`; targetElement.insertAdjacentHTML(\u0026#34;beforebegin\u0026#34;, newHTML); // 处理响应数据 const handleResponseData = (data) =\u0026gt; { const { content, created_at } = data[0]; const formattedTime = new Date(created_at).toLocaleString(); const htmlStencil = ` \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; ${content} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;time\u0026#34;\u0026gt; ${formattedTime} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `; const originalElement = document.getElementById(\u0026#39;Rep\u0026#39;); originalElement.innerHTML = htmlStencil; }; // 请求数据 const domain = \u0026#34;cmx.0500000.xyz\u0026#34;; const uid = \u0026#34;xxxxxxxxxxx\u0026#34;; const httpUrl = `https://${domain}/api/v1/accounts/${uid}/statuses?limit=1%20||%20%27%27`; fetch(httpUrl) .then(response =\u0026gt; { if (response.ok) { return response.json(); } throw new Error(\u0026#39;Network response was not OK\u0026#39;); }) .then(handleResponseData) .catch(error =\u0026gt; { console.log(\u0026#39;Error:\u0026#39;, error); }); /你的网站目录/themes/hugo-theme-stack/layouts/partials/widget/tag-cloud.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {{- $context := .Context -}} {{- $limit := default 10 .Params.limit -}} \u0026lt;!-- 插入 mastodon 动态 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/mastodon.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;section class=\u0026#34;widget tagCloud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;widget-icon\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;tag\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026#34;widget-title section-title\u0026#34;\u0026gt;{{ T \u0026#34;widget.tagCloud.title\u0026#34; }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;tagCloud-tags\u0026#34;\u0026gt; {{ range first $limit $context.Site.Taxonomies.tags.ByCount }} \u0026lt;a href=\u0026#34;{{ .Page.RelPermalink }}\u0026#34; class=\u0026#34;font_size_{{ .Count }}\u0026#34;\u0026gt; {{ .Page.Title }} \u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; /你的网站目录//static/mastodon.svg\n1 2 3 4 5 6 7 8 9 10 \u0026lt;svg class=\u0026#34;icon icon-tabler icon-tabler-infinity\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 61 65\u0026#34; fill=\u0026#34;none\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M60.7539 14.3904C59.8143 7.40642 53.7273 1.90257 46.5117 0.836066C45.2943 0.655854 40.6819 0 29.9973 0H29.9175C19.2299 0 16.937 0.655854 15.7196 0.836066C8.70488 1.87302 2.29885 6.81852 0.744617 13.8852C-0.00294988 17.3654 -0.0827298 21.2237 0.0561464 24.7629C0.254119 29.8384 0.292531 34.905 0.753482 39.9598C1.07215 43.3175 1.62806 46.6484 2.41704 49.9276C3.89445 55.9839 9.87499 61.0239 15.7344 63.0801C22.0077 65.2244 28.7542 65.5804 35.2184 64.1082C35.9295 63.9428 36.6318 63.7508 37.3252 63.5321C38.8971 63.0329 40.738 62.4745 42.0913 61.4937C42.1099 61.4799 42.1251 61.4621 42.1358 61.4417C42.1466 61.4212 42.1526 61.3986 42.1534 61.3755V56.4773C42.153 56.4557 42.1479 56.4345 42.1383 56.4151C42.1287 56.3958 42.1149 56.3788 42.0979 56.3655C42.0809 56.3522 42.0611 56.3429 42.04 56.3382C42.019 56.3335 41.9971 56.3336 41.9761 56.3384C37.8345 57.3276 33.5905 57.8234 29.3324 57.8156C22.0045 57.8156 20.0336 54.3384 19.4693 52.8908C19.0156 51.6397 18.7275 50.3346 18.6124 49.0088C18.6112 48.9866 18.6153 48.9643 18.6243 48.9439C18.6333 48.9236 18.647 48.9056 18.6643 48.8915C18.6816 48.8774 18.7019 48.8675 18.7237 48.8628C18.7455 48.858 18.7681 48.8585 18.7897 48.8641C22.8622 49.8465 27.037 50.3423 31.2265 50.3412C32.234 50.3412 33.2387 50.3412 34.2463 50.3146C38.4598 50.1964 42.9009 49.9808 47.0465 49.1713C47.1499 49.1506 47.2534 49.1329 47.342 49.1063C53.881 47.8507 60.1038 43.9097 60.7362 33.9301C60.7598 33.5372 60.8189 29.8148 60.8189 29.4071C60.8218 28.0215 61.2651 19.5781 60.7539 14.3904Z\u0026#34; fill=\u0026#34;url(#paint0_linear_89_8)\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M50.3943 22.237V39.5876H43.5185V22.7481C43.5185 19.2029 42.0411 17.3949 39.036 17.3949C35.7325 17.3949 34.0778 19.5338 34.0778 23.7585V32.9759H27.2434V23.7585C27.2434 19.5338 25.5857 17.3949 22.2822 17.3949C19.2949 17.3949 17.8027 19.2029 17.8027 22.7481V39.5876H10.9298V22.237C10.9298 18.6918 11.835 15.8754 13.6453 13.7877C15.5128 11.7049 17.9623 10.6355 21.0028 10.6355C24.522 10.6355 27.1813 11.9885 28.9542 14.6917L30.665 17.5633L32.3788 14.6917C34.1517 11.9885 36.811 10.6355 40.3243 10.6355C43.3619 10.6355 45.8114 11.7049 47.6847 13.7877C49.4931 15.8734 50.3963 18.6899 50.3943 22.237Z\u0026#34; fill=\u0026#34;white\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;defs\u0026gt; \u0026lt;linearGradient id=\u0026#34;paint0_linear_89_8\u0026#34; x1=\u0026#34;30.5\u0026#34; y1=\u0026#34;0\u0026#34; x2=\u0026#34;30.5\u0026#34; y2=\u0026#34;65\u0026#34; gradientUnits=\u0026#34;userSpaceOnUse\u0026#34;\u0026gt; \u0026lt;stop stop-color=\u0026#34;#BDBDBF\u0026#34;\u0026gt;\u0026lt;/stop\u0026gt; \u0026lt;stop offset=\u0026#34;1\u0026#34; stop-color=\u0026#34;#BDBDBF\u0026#34;\u0026gt;\u0026lt;/stop\u0026gt; \u0026lt;/linearGradient\u0026gt; \u0026lt;/defs\u0026gt; \u0026lt;/svg\u0026gt; /你的网站目录/assets/scss/custom.scss\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //mastodon 样式表 .widget-mastodon--list { border-radius: var(--card-border-radius); box-shadow: var(--shadow-11); background-color: var(--card-background); } .item { padding: 10px 20px; color: var(--card-text-color-main); font-size: 1.4rem; transparent: box-shadow .3s ease; } .emoji { width: 3.3em; height: 3.3em; object-fit: contain; vertical-align: middle; margin: -.2ex .15em .2ex; } .time { color: var(--card-text-color-tertiary); font-size: .4rem; } 未完待续\u0026hellip; ","date":"2023-07-08T09:42:08+08:00","image":"https://blog.eeho.cn/p/hugo%E9%A6%96%E5%AE%89%E8%A3%85%E5%92%8C%E4%B8%80%E4%BA%9B%E9%AD%94%E6%94%B9/BackGround_hu54f74ce482ea03416e0989886f9a9743_55808_120x120_fill_box_smart1_3.png","permalink":"https://blog.eeho.cn/p/hugo%E9%A6%96%E5%AE%89%E8%A3%85%E5%92%8C%E4%B8%80%E4%BA%9B%E9%AD%94%E6%94%B9/","title":"Hugo首安装和一些魔改"}]